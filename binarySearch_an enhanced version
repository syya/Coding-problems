/*an improved binarySearch:
If the target is found, return the index of the target in the array;
Or else, return the range that it falls at. (If the target is smaller than array[0], print out: (-1,0); if the target
is larger than array[array.length-1], print out: (array.length-1,array.length))
*/ 

public class Solution{
	public static void main(String[] a){
		int[] array={0,1,2,3,4,5,6,7,9};
		System.out.println(array.length);
		if(array==null||array.length<1){
			System.out.println("Input is invalid.");
			System.exit(-1);
		}
		int target=8;
		int begin=0, end=array.length-1;
    	while(begin<=end){
    		int mid=(begin+end)/2;
    		if(array[mid]>target) end=mid-1;
    		else if(array[mid]<target) begin=mid+1;
    		else {
    			System.out.print("The target is found. The index is: "+mid);
    			break;
    		}
    	}
    	if(begin>end){//when finishing the while loop, the begin and end will be the bound of the range: (end, begin)
    		System.out.println("The target is not found. The range that it falls at is: ("+end+", "+begin+")");
    	}
	}
}

/*Besides, the improved binarySearch can be put as a method which return an integer value:
if the target is found, return the index of the target in the array;
Or else, return the lower bound of the range that it falls at.*/

int binarySearch(int[] array, int begin, int end, int target) throws Exception{
	//check input:
	if(array==null||array.length<1||array.length-1<Math.max(begin, end)) throw new Exception("invalid input");
	while(begin<=end){
		int mid=begin+(end-begin)/2;
		if(array[mid]>target) end=mid-1;
    	else if(array[mid]<target) begin=mid+1;
    	else return mid;
    }
    //when finishing the while loop, the begin and end will be the bound of the range: (end, begin)
    return end;
}
