/* For algorithm, refer to:
http://www.geeksforgeeks.org/counting-inversions/
*/

import java.util.Arrays;

public class Solution {
	public static void main(String[] args){
		int[] num={ 5,2, 3};
		int inversion_count=mergeSort(num,0,num.length-1);
		System.out.println(Arrays.toString(num));
		System.out.println(inversion_count);
	}
	
	public static int mergeSort(int[] num, int start, int end){
		if(start<end){
			int mid=(start+end)/2;
			int count1=mergeSort(num, start, mid);
			int count2=mergeSort(num, mid+1, end);
			int count3=merge(num, start, mid, end);
			return count1+count2+count3;
		}else{
			return 0;
		}
		
	}
    
	public static int merge(int[] num, int start, int mid, int end){
		//merge start...mid and mid+1...end
		int[] result=new int[end-start+1];
		int index1=start;
		int index2=mid+1;
		int index3=0;
		int count3=0;
		while(index1<=mid && index2<=end){
			if(num[index1]<=num[index2]){
				result[index3]=num[index1];
				index3++;
				index1++;
			}else{
				count3+=(mid-index1+1);
				result[index3]=num[index2];
				index3++;
				index2++;
			}
		}
		if(index1>mid){
			while(index2<=end){
				result[index3]=num[index2];
				index3++;
				index2++;
			}
		}else{
			while(index1<=mid){
				result[index3]=num[index1];
				index3++;
				index1++;
			}
		}
		//After getting result, copy result back to num
		for(int i=start;i<=end;i++){
			num[i]=result[i-start];
		}
		return count3;
	}
}
