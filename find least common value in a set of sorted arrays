/*Method 1: join the arrays one by one
Time complexity: O(N), N is the total number of elements in all arrays
Space complexity: O(N/n), n is the number of arrays (To simplify the analysis, we assume all the arrays have the
same length.)
*/
	public static int getLCV(ArrayList<ArrayList<Integer>> arrays){
    	if(arrays==null||arrays.size()<1) return Integer.MIN_VALUE;
    	ArrayList<Integer> joinedResult=arrays.get(0);
    	for(int i=1;i<arrays.size();i++){
    		joinedResult=join(joinedResult, arrays.get(i));
    	}
    	if(joinedResult.size()<1) return Integer.MIN_VALUE;
    	return joinedResult.get(0);
        
    }
    
    public static ArrayList<Integer> join(ArrayList<Integer> l1, ArrayList<Integer> l2){
    	ArrayList<Integer> result=new ArrayList<Integer>();
    	for(int i=0,j=0;i<l1.size() && j<l2.size();){
    		if(l1.get(i)<l2.get(j)){
    			i++;
    		}else if(l1.get(i)>l2.get(j)){
    			j++;
    		}else{
    			result.add(l1.get(i));
    			i++;
    			j++;
    		}
    	}
    	return result;
    }
    
/*Method 2: find the shortest array, then check its each element (from smallest to largest) against other arrays 
with binary search.
Time complexity: (N/n)*log(N/n)*(n-1) -> O(N*log(N/n));
Space complexity: O(1);
*/

    public static int getLCV(ArrayList<ArrayList<Integer>> arrays){
        int numofarrays=arrays.size();
        int min_len=Integer.MAX_VALUE;
        int no_array=0; //record which array is shortest
        for(int i=0;i<numofarrays;i++){
            int len=arrays.get(i).size();
            if(len<min_len) {
                min_len=len;
                no_array=i;
            }
        
        }
        for(int a:arrays.get(no_array)){
            if(check(a, arrays, no_array)){
                return a;
            }
        }
        return Integer.MAX_VALUE;
        
    }
    
    static boolean check(int num, ArrayList<ArrayList<Integer>> arrays,int no_array){
        boolean  flag=true;
    	for(int i=0;i<arrays.size();i++){
            if(i!=no_array){
                  ArrayList<Integer> cur_array=arrays.get(i);
                  if(binarySearch (cur_array,0,cur_array.size()-1, num)==false){
                      flag=false;
                	  break;
                  }//check whether num is in cur_array;
            }
        }
    	return flag;
    }
    
    static boolean binarySearch(ArrayList<Integer> cur_array, int start, int end, int target){
    	while(start<=end){
    		int mid=(start+end)/2;
    		if(cur_array.get(mid)>target){
    			end=mid-1;
    		}else if(cur_array.get(mid)<target){
    			start=mid+1;
    		}else{
    			return true;
    		}
    	}
    	return false;
    }
    

